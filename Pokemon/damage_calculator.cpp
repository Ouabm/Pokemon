#include <iostream>
#include <cstdlib>  // Pour rand() et srand()
#include <ctime>    // Pour time()
#include <type.hpp>

float Type_damage(Type attack , Type def_1 , Type def_2){
    if (Type def_2!=None){
        return Table_Type[attack][def_1]*Table[attack][def_2];
    }
    else {
        return Table_Type[attack][def_1];
    }
}

void Create_Table_Type(){
    float Table_Type[18][18]={
        {1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 0.5 , 0.0 , 1.0 , 1.0 , 0.5 , 1.0} , 
        {1.0 , 0.5 , 0.5 , 2.0 , 1.0 , 1.0 , 1.0 , 0.5 , 2.0 , 0.5 , 1.0 , 0.5 , 2.0 , 1.0 , 0.5 , 1.0 , 0.5 , 1.0} , 
        {1.0 , 2.0 , 0.5 , 0.5 , 1.0 , 2.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 2.0 , 0.5 , 1.0 , 0.5 , 1.0 , 2.0 , 1.0} , 
        {1.0 , 0.5 , 2.0 , 0.5 , 1.0 , 1.0 , 1.0 , 1.0 , 2.0 , 1.0 , 1.0 , 1.0 , 2.0 , 1.0 , 0.5 , 1.0 , 1.0 , 1.0} , 
        {1.0 , 0.5 , 1.0 , 2.0 , 0.5 , 1.0 , 1.0 , 1.0 , 0.0 , 2.0 , 1.0 , 1.0 , 1.0 , 1.0 , 0.5 , 1.0 , 1.0 , 1.0} , 
        {1.0 , 2.0 , 0.5 , 0.5 , 1.0 , 0.5 , 1.0 , 1.0 , 2.0 , 2.0 , 1.0 , 1.0 , 1.0 , 1.0 , 2.0 , 1.0 , 0.5 , 1.0} , 
        {2.0 , 1.0 , 1.0 , 1.0 , 1.0 , 2.0 , 1.0 , 0.5 , 1.0 , 0.5 , 0.5 , 0.5 , 2.0 , 0.0 , 1.0 , 2.0 , 2.0 , 0.5} , 
        {1.0 , 2.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 0.5 , 0.5 , 1.0 , 1.0 , 1.0 , 0.5 , 0.5 , 1.0 , 1.0 , 0.0 , 2.0} , 
        {1.0 , 0.5 , 2.0 , 1.0 , 2.0 , 1.0 , 1.0 , 2.0 , 1.0 , 0.0 , 1.0 , 0.5 , 2.0 , 1.0 , 1.0 , 1.0 , 2.0 , 1.0} , 
        {1.0 , 2.0 , 1.0 , 1.0 , 0.5 , 1.0 , 2.0 , 1.0 , 1.0 , 1.0 , 1.0 , 2.0 , 0.5 , 1.0 , 1.0 , 1.0 , 0.5 , 1.0} , 
        {1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 2.0 , 2.0 , 1.0 , 1.0 , 0.5 , 1.0 , 1.0 , 1.0 , 1.0 , 0.0 , 0.5 , 1.0} , 
        {1.0 , 2.0 , 0.5 , 1.0 , 1.0 , 1.0 , 0.5 , 0.5 , 1.0 , 0.5 , 2.0 , 1.0 , 1.0 , 0.5 , 1.0 , 2.0 , 0.5 , 0.5} , 
        {1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 2.0 , 0.5 , 1.0 , 0.5 , 2.0 , 1.0 , 2.0 , 1.0 , 1.0 , 1.0 , 1.0 , 0.5 , 1.0} , 
        {0.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 2.0 , 1.0 , 1.0 , 2.0 , 1.0 , 0.5 , 1.0 , 1.0} , 
        {1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 2.0 , 1.0 , 0.5 , 0.0} , 
        {1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 0.5 , 1.0 , 1.0 , 1.0 , 2.0 , 1.0 , 1.0 , 2.0 , 1.0 , 0.5 , 1.0 , 0.5} , 
        {1.0 , 1.0 , 0.5 , 0.5 , 0.5 , 2.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 2.0 , 1.0 , 1.0 , 1.0 , 0.5 , 2.0} , 
        {1.0 , 1.0 , 0.5 , 1.0 , 1.0 , 1.0 , 2.0 , 0.5 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 2.0 , 2.0 , 0.5 , 1.0}
    }; 
}

int Calcul_dmg(int p_niveau=50 , int p_att , int m_power , int p_def , m_type, p1_type_1, p1_type_2, p2_type_1, p2_type_2){
    int min1 = 0 ,  max1 = 15;
    int min2 = 85 ,  max2 = 100;
    int randomInRange = min1 + std::rand() % (max1 - min1 + 1);
    int crit = randomInRange == 15 ? 1.5 : 1;
    int role = min2 + std::rand() % (max2 - min2 + 1);
    int STAB = m_type == (p1_type_1 || p1_type_2) ? 1.5 : 1;
    return ((((p_niveau*0.4+2)*p_att*m_power)/(p_def*50))*STAB*Type_damage(m_type, p2_type_1, p2_type_2)*crit*(role/100))+1;
